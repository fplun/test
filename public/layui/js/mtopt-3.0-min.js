var mtopt = {
    fun: function () { }, exec: function (e, a) { if (e == null || typeof (e) != "object") { return e } else { var d = new Object(); for (var c in e) { if (c == a) { e[c]() } else { d[c] = mtopt.exec(e[c], a) } } return d } }, parent: null, create: function (a) { var c = null; try { c = document.createElement(a) } catch (f) { var g = document.createElement("div"); g.innerHTML = a; c = g.firstChild; delete g } return c }, clone: function (d) { if (!mtopt.isObject(d)) { return d } if (d == null) { return d } if (d.cloneNode) { d.cloneNode(false) } else { var c = new Object(); for (var a in d) { c[a] = this.clone(d[a]) } return c } }, gettimeZone: function () { return -(new Date()).getTimezoneOffset() }, getbyClass: function (a, c) { return (elm || document).getElementsByClassName(a) }, getbyTag: function (a, c) { return (c || document).getElementsByName(a) }, getbyId: function (a, c) { return (c || document).getById(a) }, getbyName: function (a, c) { return (c || document).getElementsByName(a) }, isNaN: function (a) { return isNaN(a) }, isUndefined: function (a) { return typeof (a) == "undefined" }, isNumber: function (a) { return typeof (a) == "number" }, isArray: function (c) { try { return c.constructor == Array } catch (a) { return false } }, isFunction: function (a) { return typeof (a) == "function" }, isObject: function (a) { return typeof (a) == "object" }, isString: function (a) { return typeof (a) == "string" }, isXML: function (a) { return a && (a.ownerDocument || a).documentElement ? documentElement.nodeName !== "HTML" : false }, isElement: function (a) { return a.tagName ? true : false }, innerWidth: function () { if (mtopt.isNumber(window.innerWidth) == false) { return (document.compatMode == "CSS1Compat" ? document.documentElement : document.body).clientWidth } else { return window.innerWidth } }, innerHeight: function () { if (mtopt.isNumber(window.innerHeight) == false) { return (document.compatMode == "CSS1Compat" ? document.documentElement : document.body).clientHeight } else { return window.innerHeight } }, contains: function (c, a) { return c == a }, exception: function (a) { throw new Error(a) }, browser: { isIE: function () { return navigator.userAgent.indexOf("MSIE") >= 0 || navigator.userAgent.indexOf("Trident") >= 0 }, isChrome: function () { return navigator.userAgent.indexOf("Chrome") >= 0 }, isOpera: function () { return navigator.userAgent.indexOf("Opera") >= 0 }, isSafari: function () { return navigator.userAgent.indexOf("Safari") >= 0 && navigator.userAgent.indexOf("Chrome") < 0 }, isCamino: function () { return navigator.userAgent.indexOf("Camino") >= 0 }, isFirefox: function () { return navigator.userAgent.indexOf("Firefox") >= 0 }, isStandard: function () { return window.ActiveXObject ? false : true }, userAgent: function () { return navigator.userAgent }, version: function () { var f = window.navigator.userAgent.toLocaleLowerCase(); var e = /(msie) ([\d.]+)/; var c = /(chrome)\/([\d.]+)/; var g = /(firefox)\/([\d.]+)/; var h = /(safari)\/([\d.]+)/; var d = /(opera)\/([\d.]+)/; var a = /(trident)\/([\d.]+)/; b = f.match(e) || f.match(c) || f.match(g) || f.match(h) || f.match(d) || (f.match(a) ? [0, 0, 11] : null); return mtopt.parse.toInteger(b[2]) } }, ajax: function (a, d, g, c, f) { var e = mtopt.data.object(); e.request = null; e.url = null; e.data = mtopt.data.dictionary(); e.callBack = null; e.async = false; e.medhot = null; e.timeout = 999999; e.uid = null; e.pwd = null; e.contentType = "application/x-www-form-urlencoded"; e.init = function (h, o, q, n, p) { this.url = h; if (o == null) { this.data = mtopt.data.dictionary() } else { if (mtopt.isObject(o)) { this.data = o } else { if (mtopt.isString(o)) { var k = mtopt.data.string(o).split("&"); for (var j in k) { var l = k[j]; l = mtopt.data.string(o).split("="); if (l.length >= 2) { this.data.add(l[0], l[1]) } } } } } this.callBack = q; this.async = !(n == true || n == false) ? true : n; this.medhot = !p ? "post" : p }; e.send = function (n) { var j = window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP"); j.onreadystatechange = n || function () { try { if (j.readyState == 4 && j.status == 200) { e.callBack(j.responseText) } else { return } delete e.request; e.request = null } catch (o) { } }; j.onerror = this.onerror; j.ontimeout = this.ontimeout; j.onabort = this.onabort; if (this.uid == null) { j.open(this.medhot, this.url, this.async) } else { j.open(this.medhot, this.url, this.async, this.uid, this.pwd) } if (this.async) { j.timeout = this.timeout } j.setRequestHeader("content-type", this.contentType); var l = ""; for (var h in this.data.items) { var k = this.data.items[h]; if (l.length > 0) { l += "&" } l += k.key + "=" + escape(k.value) } this.request = j; this.request.send(l) }; e.abort = function () { if (this.request != null) { this.request.abort() } }; e.onerror = mtopt.fun; e.ontimeout = mtopt.fun; e.onabort = mtopt.fun; e.init(a, d, g, c, f); return e }, post: function (c, e, d) { e = e || ""; var a = window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP"); a.open("POST", c, false); a.setRequestHeader("Content-Type", d || "application/x-www-form-urlencoded"); a.send(e); return a.responseText }, get: function (c, e, d) { e = e || ""; var a = window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP"); a.open("GET", c, false); a.setRequestHeader("Content-Type", d || "application/x-www-form-urlencoded"); a.send(e); return a.responseText }, upload: function (d, e, f, j) {
        var h = "mup_" + d; var c = document.createElement("div"); c.style.display = "none"; var k = document.createElement("iframe"); k.id = h; k.name = h; var a = f.cloneNode(false); f.name = h; a.onchange = f.onchange;
        mtopt.node(f).before(a); var g = document.createElement("form"); g.method = "post"; g.enctype = "multipart/form-data"; g.action = e; g.target = h; g.appendChild(f); c.appendChild(k); c.appendChild(g); document.body.appendChild(c); k.onload = function () { j(); mtopt.node(c).remove() }; g.submit()
    }, firstOpen: false, openTime: null, initTime: 0, queryString: function (c, a) { var f = null; var a = a ? a : mtopt.url(); if (mtopt.isString(c)) { f = a.match(new RegExp("[?&]" + c + "=([^&]+)", "i")); if (a == null || a.length < 1) { return null } return (f != null && f.length > 0) ? f[1] : null } else { f = a.match(new RegExp("[?&][^?&]+=[^?&]+", "g")); if (f == null) { return null } else { for (var d = 0; d < f.length; d++) { var e = f[d].substring(1).split("="); f[d] = []; if (f[d].push(e[0]) != undefined && f[d].push(e[1]) != undefined) { f[d].push(e[0]); f[d].push(e[1]) } } return f } } }, redirect: function (f, d) { var j = mtopt.queryString(null, f); var h = mtopt.queryString(); j = j ? j : []; h = h ? h : []; var e = f.split("?")[0]; if (d == true) { for (var a in h) { var c = false; for (var g in j) { if (j[g][0] == h[a][0]) { c = true; h[g] = j[a]; break } else { continue } } if (c == false) { j.push(h[a]) } } e += "?"; for (var g in j) { if (g < j.length && g > 0) { e += "&" } e += j[g][0] + "=" + j[g][1] } } else { e = f } e = e.replace("#?", "?"); if (location.href) { location.href = e } else { location = e } }, url: function (a) { if (!mtopt.isUndefined(a) && a) { return document.URL.split("?")[0] } else { return document.URL } }, back: function (a) { history.go(-a) }, go: function (a) { history.go(a) }, reload: function () { location.reload() }, settings: null, data: {
        object: function (obj, fun) { var o = new Object(); o.objectEach = function (fun, obj) { obj = obj || this; if (mtopt.isObject(obj)) { return obj } if (obj == null) { return obj } var nobj = new Object(); for (var i in obj) { fun(obj[i]); nobj[i] = arguments.callee(fun, obj[i]) } return nobj }; o.objectAdd = function (name) { eval("this." + name + "=null") }; o.objectGet = function (name) { if (this == null) { return null } else { if (name == null || name == "") { return null } } for (var p in this) { for (var p in this) { if (p == name) { return this[p] } else { continue } } } return null }; o.objectSet = function (name, val) { if (this == null) { return null } else { if (name == null || name == "") { return null } } for (var p in this) { if (p == name) { this[p] = val } } }; o.objectClone = function () { return mtopt.clone(this) }; if (mtopt.isString(obj)) { var kvs = mtopt.json.getObject(obj); for (var i in kvs) { var kv = kvs[i]; o.objectAdd(kv.Key); o.objectSet(kv.Key, kv.Value) } } else { if (obj) { o = obj } } return o }, integer: function (a) { var c = mtopt.data.object(); c.value = 0; c.min = 0; c.max = 0; c.add = function (d) { return mtopt.data.integer(this.value + this.parse(d)) }; c.sub = function (d) { return mtopt.data.integer(this.value - this.parse(d)) }; c.mul = function (d) { return mtopt.data.integer(this.value * this.parse(d)) }; c.div = function (d) { return mtopt.data.integer(this.value / this.parse(d)) }; c.mod = function (d) { return mtopt.data.integer(this.value % this.parse(d)) }; c.equal = function (d) { return this.value == this.parse(d) }; c.reverse = function () { return mtopt.data.integer(-this.value) }; c.amend = function () { if (this.value < this.min) { this.value = this.min } if (this.value > this.max) { this.value = this.max } }; c.parse = function (e) { var d = null; if (e == null) { d = 0 } else { d = parseInt(e) } d = isNaN(d) ? 0 : d; return d }; c.back = function () { this.min = -2147483648; this.max = 2147483647 }; c.set = function (d) { this.value = this.parse(d); this.amend() }; c.get = function () { return this.value }; c.toString = function () { this.value.toString() }; c.back(); c.set(a); return c }, decimal: function (a) { var c = mtopt.data.integer(); c.add = function (d) { return mtopt.data.decimal(this.value + this.parse(d)) }; c.sub = function (d) { return mtopt.data.decimal(this.value - this.parse(d)) }; c.mul = function (d) { return mtopt.data.decimal(this.value * this.parse(d)) }; c.div = function (d) { return mtopt.data.decimal(this.value / this.parse(d)) }; c.mod = function (d) { return mtopt.data.decimal(this.value % this.parse(d)) }; c.reverse = function () { return mtopt.data.decimal(-this.value) }; c.parse = function (e) { var d = null; if (e == null) { d = 0 } else { d = parseFloat(e) } d = isNaN(d) ? 0 : d; return d }; c.back = function () { this.min = -3.40282e+38; this.max = 3.40282e+38 }; c.back(); c.set(a); return c }, string: function (a) {
            var c = mtopt.data.object(); c.value = null; c.max = 0; c.equal = function (d) { return this.parse(d) == this.value }; c.toUper = function () { return mtopt.data.string(this.parse(this.value.toLocaleUpperCase())) }; c.toLower = function () { return mtopt.data.string(this.parse(this.value.toLocaleLowerCase())) }; c.contains = function (d) { return this.parse(this.value).indexOf(d) >= 0 }; c.indexOf = function (d) { return this.parse(this.value).indexOf(d) }; c.lastIndexOf = function (d) { return this.parse(this.value).lastIndexOf(d) }; c.padLeft = function (e, g) { var f = ""; for (var d = 0; d < e; d++) { f += g } return mtopt.data.string(f + this.parse(this.value)) }; c.padRight = function (e, g) { var f = ""; for (var d = 0; d < (e - 1) ; d++) { f += g } return mtopt.data.string(this.parse(this.value) + f) }; c.insert = function (e, h) { var g = ""; for (var f = 0; f < this.parse(this.value).length; f++) { g += this.parse(this.value).substr(f, 1); if (f == e) { for (var d = 0; d < this.value.length; d++) { g += h.substr(d, 1) } } } return mtopt.data.string(g) }; c.removeChar = function (f) {
                var e = ""; for (var d = 0; d < this.parse(this.value).length; d++) {
                    if (this.parse(this.value).substr(d, 1) != f) {
                        e += this.parse(this.value).substr(d, 1)
                    } else { continue }
                } return mtopt.data.string(e)
            }; c.removeIndex = function (d) { var f = ""; for (var e = 0; e < this.parse(this.value).length; e++) { if (e > d - 1) { continue } else { f += this.parse(this.value).substr(e, 1) } } return mtopt.data.string(f) }; c.removeScope = function (d, g) { var f = ""; for (var e = 0; e < this.parse(this.value).length; e++) { if (e > d - 1 && e < d + g) { continue } else { f += this.parse(this.value).substr(e, 1) } } return mtopt.data.string(f) }; c.split = function (d) { return this.parse(this.value).split(d) }; c.substringIndex = function (d) { var f = ""; for (var e = 0; e < this.parse(this.value).length; e++) { if (e > d - 1) { f += this.parse(this.value).substr(e, 1) } else { continue } } return mtopt.data.string(f) }; c.substringScope = function (d, g) { var f = ""; for (var e = 0; e < this.parse(this.value).length; e++) { if (e > d - 1 && e < d + g) { f += this.parse(this.value).substr(e, 1) } else { continue } } return mtopt.data.string(f) }; c.toCharArray = function () { var e = []; for (var d = 0; d < this.parse(this.value).length; d++) { e.push(this.parse(this.value).substr(d, 1)) } return e }; c.trimEnd = function (g) { var d = 0; var f = this.parse(this.value).length; for (var e = this.parse(this.value).length - 1; e > 0; e--) { if (this.parse(this.value).substr(e, 1) == g) { f = e } else { break } } return mtopt.data.string(this.value.substring(d, f)) }; c.trimStart = function (g) { var d = 0; var f = this.parse(this.value).length; for (var e = 0; e < this.value.length; e++) { if (this.value.substr(e, 1) == g) { d = e } else { break } } return mtopt.data.string(this.value.substring(d + 1, f)) }; c.trim = function (d) { return mtopt.data.string(this.value).trimStart(d).trimEnd(d) }; c.replace = function (d, e) { var f = this.value; while (f.indexOf(d) >= 0) { f = f.replace(d, e) } return mtopt.data.string(f) }; c.fristUper = function (j) { var f = j || " "; var g = this.value.split(f); var e = ""; for (var h in g) { var d = g[h]; if (g.length <= 1) { d = d.toUpperCase() } else { d = d.substr(0, 1).toUpperCase() + d.substr(1, d.length - 1) } e += f + d } return mtopt.data.string(e) }; c.fristLower = function (j) { var f = j || " "; var g = this.value.split(f); var e = ""; for (var h in g) { var d = g[h]; if (g.length <= 1) { d = d.toLowerCase() } else { d = d.substr(0, 1).toLowerCase() + d.substr(1, d.length - 1) } e += f + d } return mtopt.data.string(e) }; c.toPixelWidth = function (e, g) { var h = document.createElement("div"); h.style.position = "absolute"; h.style.visibility = "hidden"; h.style.fontWeight = g; h.style.fontSize = e + "px"; h.innerHTML = this.value; document.body.appendChild(h); var d = mtopt.node(h); var f = d.width(); d.remove(); return f }; c.toPixelHeight = function (f, g) { var h = document.createElement("div"); h.style.position = "absolute"; h.style.visibility = "hidden"; h.style.fontWeight = g; h.style.fontSize = f + "px"; h.innerHTML = this.value; document.body.appendChild(h); var e = mtopt.node(h); var d = e.height(); e.remove(); return d }; c.length = function () { return this.parse(this.value).length }; c.set = function (d) { this.value = this.parse(d); this.amend() }; c.get = function () { return this.value }; c.amend = function () { if (this.value.length > this.max && this.max > 0) { this.value = this.substringScope(0, this.max) } }; c.parse = function (e) { var d = e; if (e == null) { d = "" } else { d = d.toString() } return d }; c.back = function () { this.max = 0 }; c.toString = function () { return this.value.toString() }; c.set(a); c.amend(); return c
        }, date: function (a) {
            var c = mtopt.data.object(); c.value = null; c.parse = function (f) { var d = null; if (!f) { d = new window.Date() } else { if (mtopt.isObject(f)) { if (f.value) { d = f.value } else { d = f } } else { if (mtopt.isString(f)) { d = f; d = d.replace("T", " ").replace(/-/g, "/").replace("年", "/").replace("月", "/").replace("日", "/").replace("时", ":").replace("分", ":").replace("秒", "").replace("_", " "); var e = d.split("."); if (e.length >= 2) { d = e[0] } d = new window.Date(d) } else { d = new window.Date(f) } } } return d }; c.addDay = function (d) { var e = new window.Date(this.value); if (mtopt.isNaN(e)) { e = new window.Date() } e = new window.Date(window.Date.parse(e) + (86400000 * parseInt(d))); return mtopt.data.date(e) }; c.addMonth = function (e) { var d = new window.Date(this.value); if (mtopt.isNaN(d)) { d = new window.Date() } d = new window.Date(d.getFullYear(), (d.getMonth()) + parseInt(e), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds()); return mtopt.data.date(d) }; c.addYear = function (e) { var d = new window.Date(this.value); if (mtopt.isNaN(d)) { d = new window.Date() } d = new window.Date(d.getFullYear() + parseInt(e), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds()); return mtopt.data.date(d) }; c.addWeek = function (e) { var d = new window.Date(this.value); if (mtopt.isNaN(d)) { d = new window.Date() } d = new window.Date(window.Date.parse(d) + ((86400000 * 7) * parseInt(e))); return mtopt.data.date(d) }; c.addHour = function (d) { var e = new window.Date(this.value); if (mtopt.isNaN(e)) { e = new window.Date() } e = new window.Date(window.Date.parse(e) + (3600000 * parseInt(d))); return mtopt.data.date(e) }; c.addMinute = function (e) { var d = new window.Date(this.value); if (mtopt.isNaN(d)) { d = new window.Date() } d = new window.Date(window.Date.parse(d) + (60000 * parseInt(e))); return mtopt.data.date(d) }; c.addSecond = function (e) { var d = new window.Date(this.value); if (mtopt.isNaN(d)) { d = new window.Date() } d = new window.Date(window.Date.parse(d) + (1000 * parseInt(e))); return mtopt.data.date(d) }; c.totalDays = function () { return this.totalHours() / 24 }; c.totalHours = function () {
                return this.totalMinutes() / 60
            }; c.totalMinutes = function () { return this.totalSeconds() / 60 }; c.totalSeconds = function () { var d = this.get().getTime(); d = d < 0 ? -d : d; return d / 1000 }; c.add = function (e) { var f = this.value.getTime(); var d = this.parse(e).getTime(); return f + d }; c.sub = function (e) { var f = this.value.getTime(); var d = this.parse(e).getTime(); return f - d }; c.now = function () { return window.Date.now() }; c.toFormatString = function (o) { var e = o; var n = this.value.getFullYear().toString(); var g = (this.value.getMonth() + 1).toString(); var l = this.value.getDate().toString(); var k = this.value.getHours().toString(); var j = this.value.getMinutes().toString(); var p = this.value.getSeconds().toString(); var f = this.value.getMilliseconds().toString(); if (n.length < 4) { n = mtopt.data.string(n).padLeft(4 - n.length, "0").get() } if (g.length < 2) { g = mtopt.data.string(g).padLeft(2 - g.length, "0").get() } if (l.length < 2) { l = mtopt.data.string(l).padLeft(2 - l.length, "0").get() } if (k.length < 2) { k = mtopt.data.string(k).padLeft(2 - k.length, "0").get() } if (j.length < 2) { j = mtopt.data.string(j).padLeft(2 - j.length, "0").get() } if (p.length < 2) { p = mtopt.data.string(p).padLeft(2 - p.length, "0").get() } if (f.length < 3) { f = mtopt.data.string(f).padLeft(3 - f.length, "0").get() } return e.replace("yyyy", n).replace("yy", n.substring(2, 2)).replace("mm", g).replace("dd", l).replace("hh", k).replace("MM", j).replace("ss", p).replace("fff", f.substring(0, 3)).replace("ff", f.substring(0, 2)) }; c.toSimpleString = function (k) { var e = null; var g = mDate(this.value); var d = k ? mDate(k) : mDate(); var f = mDate(mDate().addDay(1).toFormatString("yyyy/mm/dd")); var h = mDate(d.sub(g.get())); var j = mDate(f.sub(g.get())); if (f.get().getFullYear() == g.get().getFullYear() && j.totalDays() > 2) { e = g.toFormatString("mm月dd日 hh:MM") } else { if (m.parse.toInteger(j.totalDays()) == 2) { e = g.toFormatString("前天hh:MM") } else { if (j.totalDays() > 1 && j.totalDays() < 2) { e = g.toFormatString("昨天hh:MM") } else { if (j.totalDays() <= 1 && h.totalHours() > 6) { e = g.toFormatString("今天hh:MM") } else { if (h.totalHours() >= 1 && h.totalDays() < 1) { e = g.toFormatString(m.parse.toInteger(h.totalHours()) + "小时前") } else { if (h.totalMinutes() >= 1 && h.totalHours() < 1) { e = g.toFormatString(m.parse.toInteger(h.totalMinutes()) + "分钟前") } else { if (h.totalSeconds() >= 5 && h.totalMinutes() < 1) { e = g.toFormatString(m.parse.toInteger(h.totalSeconds()) + "秒前") } else { if (h.totalMinutes() < 1) { e = g.toFormatString("刚刚") } else { e = g.toFormatString("yyyy年mm月dd日 hh:MM") } } } } } } } } return e }; c.getMonthDay = function () { var e = this.toFormatString("yyyy/mm/dd"); var d = parseInt(e.split("/")[0]); var g = parseInt(e.split("/")[1]); var f = false; if ((d % 4 == 0 && d % 100 != 0) || d % 400 == 0) { f = true } switch (g) { case 2: if (f) { return 29 } else { return 28 } case 1: case 3: case 5: case 7: case 8: case 10: case 12: return 31; default: return 30 } }; c.getTime = function () { return this.value.getTime() }; c.set = function (d) { this.value = this.parse(d) }; c.get = function () { return this.value }; c.set(a); return c
        }, array: function (obj) { var o = null; if (mtopt.isArray(obj)) { o = obj } else { if (mtopt.isString(obj)) { try { o = eval(obj) } catch (e) { o = [] } } else { o = [] } } return o }, list: function (obj) { var o = mtopt.data.object(); o.items = mtopt.data.array(); o.add = function (val) { if (m.isArray(val)) { for (var i in val) { this.items.push(val[i]) } } else { this.items.push(val) } }; o.reverse = function () { this.items.reverse() }; o.sort = function () { this.items.sort() }; o.contains = function (value) { var r = 0; for (var i in this) { if (i == value) { r += 1 } else { continue } } return r }; o.count = function () { return this.items.length }; o.clear = function () { this.items = mtopt.data.array() }; o.remove = function (item) { for (var i in this.items) { if (this.items[i] == item) { this.items.splice(i, 1) } } }; o.removeAt = function (index) { this.items.splice(index, 1) }; o.parse = function (obj) { var r = mtopt.data.array(); if (mtopt.isString(obj)) { try { r = eval(obj) } catch (e) { } } else { if (mtopt.isObject(obj)) { if (obj.items) { r = obj.items } else { r = obj } } } return r }; o.set = function (index, val) { this.items[index] = val }; o.get = function (index) { return this.items[index] }; o.items = o.parse(obj); return o }, queue: function (obj) { var o = mtopt.data.object(); o.items = mtopt.data.array(); o.peek = function () { if (this.items.length > 0) { var r = this.items[0]; return r } else { return null } }; o.enqueue = function (val) { this.items.push(val) }; o.dequeue = function () { if (this.items.length > 0) { var r = this.items[0]; this.items.splice(0, 1); return r } else { return null } }; o.count = function () { return this.items.length }; o.clear = function () { this.items = mtopt.data.array() }; o.parse = function (obj) { var r = mtopt.data.array(); if (mtopt.isString(obj)) { try { r = eval(obj) } catch (e) { } } else { if (mtopt.isObject(obj)) { if (obj.items) { r = obj.items } else { r = obj } } } return r }; o.items = o.parse(obj); return o }, stack: function (obj) {
            var o = mtopt.data.object(); o.items = mtopt.data.array(); o.push = function (val) { this.items.push(val) }; o.peek = function () { var r = this.items.pop(); return r }; o.pop = function () { var r = this.items.pop(); this.items.splice(this.items.length, 1); return r }; o.count = function () { return this.items.length }; o.clear = function () { this.items = mtopt.data.array() }; o.parse = function (obj) { var r = mtopt.data.array(); if (mtopt.isString(obj)) { try { r = eval(obj) } catch (e) { } } else { if (mtopt.isObject(obj)) { if (obj.items) { r = obj.items } else { r = obj } } } return r }; o.items = o.parse(obj);
            return o
        }, dictionary: function (a) { var c = mtopt.data.object(); c.item = function () { var d = mtopt.data.object(); d.key = ""; d.value = null; return d }; c.items = mtopt.data.array(); c.add = function (e, f) { if (this.getIndex(e) < 0) { var d = this.item(); d.key = e; d.value = f; this.items.push(d) } }; c.set = function (e, f) { var d = this.getIndex(e); if (d >= 0) { this.items[d].value = f } }; c.get = function (e) { var d = this.getIndex(e); if (d >= 0) { return this.items[d].value } }; c.getIndex = function (e) { for (var d in this.items) { if (this.items[d].key == e) { return d } else { continue } } return -1 }; c.containsKey = function (d) { return this.getIndex(d) >= 0 }; c.containsValue = function (f) { var e = 0; for (var d in this.items) { if (this.items[d].value == f) { e += 1 } else { continue } } return e }; c.removeAt = function (e) { var d = this.getIndex(e); if (d >= 0) { this.items.splice(d, 1) } }; c.count = function () { return this.items.length }; c.clear = function () { this.items = mtopt.data.array() }; return c }
    }, json: { getObject: function (str) { return eval("(" + str + ")") }, getString: function (g) { var h = mtopt.clone(g); switch (typeof (h)) { case "string": return '"' + h.replace(/(["\\])/g, "\\$1") + '"'; case "array": return "[" + h.map(mtopt.json.getString).join(",") + "]"; case "object": if (h instanceof Array) { var e = []; var a = h.length; for (var d = 0; d < a; d++) { e.push(mtopt.json.getString(h[d])) } return "[" + e.join(",") + "]" } else { if (h == null) { return "null" } else { var c = []; for (var f in h) { c.push(mtopt.json.getString(f) + ":" + mtopt.json.getString(h[f])) } return "{" + c.join(",") + "}" } } case "number": return h; case false: return h } } }, event: function (name, elm) { var oldname = name; name = name.length > 2 && name[0] == "o" && name[1] == "n" ? name : name = "on" + name; elm = elm || (name.toLowerCase() == "onready" ? document : window); if (!eval("elm.me_" + name)) { var eventinit = function () { var o = mtopt.data.object(); o.items = mtopt.data.array(); o.idkey = mtopt.data.dictionary(); o.add = function (fun, id) { this.items.push(fun); if (id) { this.idkey.add(id, fun) } }; o.remove = function (id) { for (var i in this.items) { var item = this.items[i]; if (this.idkey.get(id) == item) { this.items.splice(i, 1) } else { if (id == item) { this.items.splice(i, 1) } } } }; o.clear = function () { this.items = mtopt.data.array(); this.idkey = mtopt.data.dictionary() }; o.run = function (arguments) { for (var i in this.items) { var item = this.items[i]; item(arguments) } }; return o }; eval("elm.me_" + name + " = eventinit();"); switch (name.toLowerCase()) { case "onready": if (document.addEventListener) { eval("elm.addEventListener('DOMContentLoaded',function(){ elm.removeEventListener('DOMContentLoaded', arguments.callee, false); elm.me_" + name + ".run(arguments); },false)") } else { if (document.attachEvent) { eval("elm.attachEvent('onreadystatechange', function () { if (elm.readyState === 'complete') { elm.detachEvent('onreadystatechange', arguments.callee); elm.me_" + name + ".run(arguments); } })") } } default: if (document.addEventListener) { eval("elm.addEventListener('" + oldname + "',function() { elm.me_" + name + ".run(); },false)") } else { if (document.attachEvent) { eval("elm.attachEvent('" + name + "',function() { elm.me_" + name + ".run(); })") } } break } } return eval("elm.me_" + name) }, lag: {
        Pool: new Object(), Import: function (c, e) { if (!e) { e = mtopt.encry.hash(c) } var a = mtopt.data.string(c).lastIndexOf("."); switch (a < 0 ? "" : mtopt.data.string(c).substringIndex(a + 1).toLower().get()) { case "js": var d = document.createElement("script"); d.src = c; if (e) { d.id = e } document.body.appendChild(d); break; case "css": if (document.createStyleSheet) { d = document.createStyleSheet(c, e); d.owningElement.id = e } else { d = document.createElement("link"); d.rel = "stylesheet"; if (e) { d.id = e } d.href = c; document.head.appendChild(d) } break; default: break } }, UnImport: function (d) { var c = document.getById(d); if (c == null) { var a = mtopt.encry.hash(d); c = document.getById(mtopt.encry.hash(d)) } mtopt.remove(c) }, Select: function (e, l) {
            var j = l || document; var d = mtopt.data.array(); var c = mtopt.data.string(e).split(" "); var f = ""; for (var k = 0; k < c.length; k++) { if (k == 0) { } else { if (k == 1) { f += c[k] } else { f += " " + c[k] } } } if (c.length > 0) {
                var a = c[0]; switch (mtopt.data.string(a.substr(0, 1)).toUper().get()) {
                    case "#": l = j.getElementById(mtopt.data.string(a).substringIndex(1).get()); if (f.length > 0) { if (!l.tagName) { break } else { var h = mtopt.lag.Select(f, l); for (var k = 0; k < h.length; k++) { if (!h[k].tagName) { continue } else { d.push(h[k]) } } } } else { if (l != null) { d.push(l) } } break; case ".": l = j.getElementsByClassName(mtopt.data.string(a).substringIndex(1).get()); if (f.length > 0) { for (var g = 0; g < l.length; g++) { if (!l[g].tagName) { continue } else { var h = mtopt.lag.Select(f, l[g]); for (var k = 0; k < h.length; k++) { if (!h[k].tagName) { continue } else { d.push(h[k]) } } } } } else { for (var k = 0; k < l.length; k++) { if (!l[k].tagName) { continue } else { d.push(l[k]) } } } break; case "@": var l = j.getElementsByName(mtopt.data.string(a).substringIndex(1).get()); if (f.length > 0) { for (var g = 0; g < l.length; g++) { if (!l[g].tagName) { continue } else { var h = mtopt.lag.Select(f, l[g]); for (var k = 0; k < h.length; k++) { if (!h[k].tagName) { continue } else { d.push(h[k]) } } } } } else { for (var k = 0; k < l.length; k++) { if (!l[k].tagName) { continue } else { d.push(l[k]) } } } break; default: var l = j.getElementsByTagName(a); if (f.length > 0) {
                        for (var g = 0; g < l.length; g++) {
                            if (!l[g].tagName) { continue } else {
                                var h = mtopt.lag.Select(f, l[g]); for (var k = 0; k < h.length;
                                k++) { if (!h[k].tagName) { continue } else { d.push(h[k]) } }
                            }
                        }
                    } else { for (var k = 0; k < l.length; k++) { if (!l[k].tagName) { continue } else { d.push(l[k]) } } } break
                }
            } return d
        }, Space: function (lag) { var name = "mtopt.lag.Pool.Space"; if (!mtopt.lag.Pool.Space) { mtopt.lag.Pool.Space = mtopt.data.object() } if (!lag) { return mtopt.lag.Pool.Space } else { var sp = mtopt.data.string(lag).split("."); for (var I in sp) { var p = ""; for (var PI = 0; PI <= I; PI++) { if (p.length > 0) { p += "." } p += sp[PI] } if (eval(name + "." + p)) { continue } else { eval(name + "." + p + "= mtopt.data.object();") } } return eval(name + "." + lag) } }, USpace: function (lag) { var name = "mtopt.lag.Pool.Space"; if (!lag) { if (mtopt.lag.Pool.Space) { mtopt.lag.Pool.Space = mtopt.data.object() } } else { eval(name + "." + lag + "=mtopt.data.object();") } }
    }, each: function (e, a) { var d = null; if (mtopt.isString(e)) { d = mtopt.lag.Select(e) } else { if (mtopt.isArray(e)) { d = e } else { d = mtopt.data.array(); d.push(e) } } for (var c in d) { a(d[c], c) } }, random: { string: function () { var a = mtopt.data.object(); a.define = function (g, c) { var e = ""; var f = mtopt.random.number(); for (var d = 0; d < c; d++) { e += g[f.next(g.length - 1, 0)] } return e }; a.number = function (c) { return this.define(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], c) }; a.capitalAlphabet = function (c) { return this.define(["A", "B", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"], c) }; a.letterAlphabet = function (c) { return this.define(["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"], c) }; a.alphabet = function (c) { return this.define(["A", "B", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"], c) }; alphabetAndNumber = function (c) { return this.define(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"], c) }; return a }, number: function () { var a = mtopt.data.object(); a.next = function (c, d) { if (d) { return parseInt(Math.random() * (c - d) + d) } else { return parseInt(Math.random() * c) } }; a.nextDouble = function (c, d) { if (d) { return parseFloat(Math.random() * (c - d + 1) + d) } else { return parseFloat(Math.random() * c + 1) } }; return a }, color: function () { var e = ""; var a = ["0", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d"], c; for (var d = 0; d < 6; d++) { c = Math.round(Math.random() * 15); e += a[c] } return e } }, regexp: function (a) { var c = mtopt.data.object(); c.value = null; c.set = function (d) { this.value = d }; c.get = function () { return this.value }; c.match = function (e) { var d = e; return d.test(this.value) }; c.isUserName = function () { return this.match(/^[a-zA-Z][a-zA-Z0-9_]*$/) }; c.isIp = function () { return this.match(/^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/) }; c.isEmail = function () { return this.match(/^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/) }; c.isAlphabet = function () { return this.match(/^[A-Za-z]+$/) }; c.isNumber = function () { return this.match(/^[0-9]*$/) }; c.isChinese = function () { return this.match(/^[\u4e00-\u9fa5]{0,}$/) }; c.isEnglish = function () { return this.match(/^[a-zA-Z]*$/) }; c.isBeginNoZero = function () { return this.match(/^(0|[1-9][0-9]*)$/) }; c.isAlphabetNumber = function () { return this.match(/^[A-Za-z0-9]+$/) }; c.isAlphabetNumberBottomLine = function () { return this.match(/^\w+$/) }; c.isCapital = function () { return this.match(/^[A-Z]+$/) }; c.isLetter = function () { return this.match(/^[a-z]+$/) }; c.isPhone = function () { return this.match(/^(1[0-9][0-9]|15[0|3|6|7|8|9]|18[8|9])\d{8}$/) }; c.isDate = function () { return this.match(/^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/) }; c.isIDCard = function () { return this.match(/^\d{15}|\d{18}$/) }; c.isFloat = function () { return this.match(/^(-?\d+)(\.\d+)?$/) }; c.set(a); return c }, parse: {
        toInteger: function (d, a) { var c = parseInt(d, a || 10); return mtopt.isNaN(c) ? 0 : c }, toFloat: function (c) { var a = parseFloat(c); return mtopt.isNaN(a) ? 0 : a }, toBoolen: function (a) { if (m.isString(a)) { if (a.toLocaleLowerCase() == "true") { return true } else { return false } } else { return Boolean(a) } }, toDecimal: function (e, d) { if (d) { var a = 1; while (d-- > 0) { a *= 10 } var c = parseFloat(e); if (isNaN(c)) { return 0 } c = Math.round(e * a); return c / a } else { return parseFloat(e) } }, toDateTime: function (a) { return mtopt.data.date(a).get() }, toString: function (a) { return mtopt.data.string(a).get() }, toJson: function (a) { return mtopt.json.getObject(a) }, toXml: function (f) { var a, c; if (!f || mtopt.isString(f) == false) { return null } try { if (window.DOMParser) { c = new window.DOMParser(); a = c.parseFromString(f, "text/xml") } else { a = new window.ActiveXObject("Microsoft.XMLDOM"); a.async = "false"; a.loadXML(f) } } catch (d) { a = undefined } return a }, xmlToJson: function (l) {
            var c = mtopt.data.object(); if (l.nodeType == 1) {
                if (l.attributes.length > 0) {
                    c["@attributes"] = {}; for (var h = 0;
                    h < l.attributes.length; h++) { var d = l.attributes.item(h); c["@attributes"][d.nodeName] = d.nodeValue }
                }
            } else { if (l.nodeType == 3) { c = l.nodeValue } } if (l.hasChildNodes()) { for (var k = 0; k < l.childNodes.length; k++) { var g = l.childNodes.item(k); var a = g.nodeName.replace("#", ""); if (typeof (c[a]) == "undefined") { c[a] = mtopt.parse.xmlToJson(g) } else { if (typeof (c[a].length) == "undefined") { var f = c[a]; c[a] = []; c[a].push(f) } try { c[a].push(mtopt.parse.xmlToJson(g)) } catch (n) { continue } } } } return c
        }, dictionaryToarray: function (e) { var d = mtopt.data.array(); for (var a in e.items) { var c = e.items[a]; d.push(c.value) } return d }, dictionaryTolist: function (e) { var d = mtopt.data.list(); for (var a in e.items) { var c = e.items[a]; d.add(c.value) } return d }, dictionaryTostack: function (e) { var d = mtopt.data.stack(); for (var a in e.items) { var c = e.items[a]; d.push(c.Value) } return d }, dictionaryToqueue: function (e) { var d = mtopt.data.queue(); for (var a in e.items) { var c = e.items[a]; d.enqueue(c.Value) } return d }, listTostack: function (a) { return mtopt.data.stack(a) }, listToqueue: function (a) { return mtopt.data.queue(a) }, listToarray: function (a) { return mtopt.data.array(a.items) }, stackToarray: function (a) { return mtopt.data.array(a.items) }, stackToqueue: function (a) { return mtopt.data.queue(a) }, stackTolist: function (a) { return mtopt.data.list(a) }, queueTolist: function (a) { return mtopt.data.list(a) }, queueToarray: function (a) { return mtopt.data.array(a.items) }, queueTostack: function (a) { return mtopt.data.stack(a) }
    }, node: function (lag, elm) {
        var o = mtopt.data.object(); o.nodes = null; o.merge = function (val) { var arr = (val.nodes ? val.nodes : val); for (var i in arr) { this.nodes.push(arr[i]) } return this }; o.attr = function (name, val, root) { var is = mtopt.data.array(); var r = this.find(function (obj) { var ops = root ? "root." : "obj."; if (val) { eval(ops + "setAttribute(name,val);") } else { is.push(eval(ops + "getAttribute(name)")) } }); return !mtopt.isUndefined(val) ? r : (is.length == 1 ? is[0] : is) }; o.parm = function (name, val, root) { var is = mtopt.data.array(); var r = this.find(function (obj) { var ops = (!root ? "obj." + name : root + name); if (!mtopt.isUndefined(val)) { if (mtopt.isString(val)) { val.length <= 0 ? eval(ops + "='';") : eval(ops + "=val;") } else { eval(ops + "=val;") } } else { is.push(eval(ops)) } }); return !mtopt.isUndefined(val) ? r : (is.length == 1 ? is[0] : is) }; o.call = function (name) { var args = arguments; var r = null; this.find(function (obj) { var ops = "obj." + name + "("; for (var i = 1; i < args.length; i++) { ops += i == 1 ? "" : ","; ops += "args[" + i + "]" } r = eval(ops + ");") }); return r }; o.count = function () { if (this.nodes != null) { return this.nodes.length } else { return 0 } }; o.find = function (fun) { mtopt.each(this.nodes, fun); return this }; o.append = function (obj) { return this.find(function (elm) { if (mtopt.isString(obj)) { elm.innerHTML += obj } else { elm.appendChild(obj) } }) }; o.prepend = function (obj) { return this.find(function (elm) { if (mtopt.isString(obj)) { elm.innerHTML = elm.innerHTML + obj } else { elm.insertBefore(obj, elm.firstChild) } }) }; o.after = function (obj) { return this.find(function (elm) { obj = mtopt.isString(obj) ? mtopt.create(obj) : obj; if (elm.parentNode) { elm.parentNode.insertBefore(obj, elm.nextSibling) } }) }; o.before = function (obj) { return this.find(function (elm) { obj = mtopt.isString(obj) ? mtopt.create(obj) : obj; if (elm.parentNode) { elm.parentNode.insertBefore(obj, elm) } }) }; o.on = function (name, fun) { var nas = mtopt.data.string(name).split(" "); for (var i in nas) { var r = fun ? this.parm("on" + nas[i], fun) : this.parm("on" + nas[i]); if (nas.length <= 1) { return r } else { continue } } }; o.first = function () { return this.nodes[0] }; o.last = function () { return this.nodes[this.nodes.length] }; o.addClass = function (name) { return this.find(function (obj) { if (!obj.className.match(RegExp("(\\s|^)" + name + "(\\s|$)"))) { obj.className += (" " + name + " ") } }) }; o.existClass = function (name) { return this.first().className.match(RegExp("(\\s|^)" + name + "(\\s|$)")) }; o.removeClass = function (name) { return this.find(function (obj) { obj.className = obj.className.replace(new RegExp("(\\s|^)" + name + "(\\s|$)"), "") }) }; o.css = function (name, val) { if (m.isObject(name)) { for (var i in name) { var lc = i.toLocaleLowerCase(); var lv = name[i]; if (lc == "transform" || lc == "transitionduration") { this.parm("style.webkit" + (i.substring(0, 1).toUpperCase() + i.substring(1, i.length)), lv); this.parm("style.moz" + (i.substring(0, 1).toUpperCase() + i.substring(1, i.length)), lv); this.parm("style.ms" + (i.substring(0, 1).toUpperCase() + i.substring(1, i.length)), lv); this.parm("style.o" + (i.substring(0, 1).toUpperCase() + i.substring(1, i.length)), lv) } this.parm("style." + i, lv) } } else { var lc = name.toLocaleLowerCase(); if (lc == "transform" || lc == "transitionduration") { this.parm("style.webkit" + (i.substring(0, 1).toUpperCase() + i.substring(1, i.length)), val); this.parm("style.moz" + (i.substring(0, 1).toUpperCase() + i.substring(1, i.length)), val); this.parm("style.ms" + (i.substring(0, 1).toUpperCase() + i.substring(1, i.length)), val); this.parm("style.o" + (i.substring(0, 1).toUpperCase() + i.substring(1, i.length)), val) } return this.parm("style." + name, val) } }; o.currentCss = function (name, val) {
            if (this.first().currentStyle) { return !mtopt.isUndefined(val) ? this.parm("currentStyle." + name, val) : this.parm("currentStyle." + name) } else {
                return !mtopt.isUndefined(val) ? this.parm("getComputedStyle(obj,false)." + name, val, "window.") : this.parm("getComputedStyle(obj,false)." + name, undefined, "window.")
            }
        }; o.html = function (val) { return this.parm("innerHTML", val) }; o.value = function (val) { return this.parm("value", val) }; o.text = function (val) { return this.parm("innerText", val) }; o.focus = function (val) { return !mtopt.isUndefined(val) ? this.on("focus", val) : this.call("focus") }; o.blur = function (val) { return !mtopt.isUndefined(val) ? this.on("blur", val) : this.call("blur") }; o.click = function (val) { return !mtopt.isUndefined(val) ? this.on("click", val) : this.on("click")() }; o.dblclick = function (val) { return !mtopt.isUndefined(val) ? this.on("dblclick", val) : this.on("dblclick")() }; o.change = function (val) { return !mtopt.isUndefined(val) ? this.on("change", val) : this.on("change")() }; o.error = function (val) { return !mtopt.isUndefined(val) ? this.on("error", val) : this.on("error")() }; o.touchstart = function (val) { return !mtopt.isUndefined(val) ? this.on("touchstart", val) : this.on("touchstart")() }; o.plugin = function (name) { return this.parm(name) }; o.touchmove = function (val) { return !mtopt.isUndefined(val) ? this.on("touchmove", val) : this.on("touchmove")() }; o.touchend = function (val) { return !mtopt.isUndefined(val) ? this.on("touchend", val) : this.on("touchend")() }; o.touchcancel = function (val) { return !mtopt.isUndefined(val) ? this.on("touchcancel", val) : this.on("touchcancel")() }; o.keydown = function (val) { return !mtopt.isUndefined(val) ? this.on("keydown", val) : this.on("keydown")() }; o.keyup = function (val) { return !mtopt.isUndefined(val) ? this.on("keyup", val) : this.on("keyup")() }; o.mousedown = function (val) { return !mtopt.isUndefined(val) ? this.on("mousedown", val) : this.on("mousedown")() }; o.mouseup = function (val) { return !mtopt.isUndefined(val) ? this.on("mouseup", val) : this.on("mouseup")() }; o.mouseenter = function (val) { return !mtopt.isUndefined(val) ? this.on("mouseenter", val) : this.on("mouseenter")() }; o.mouseleave = function (val) { return !mtopt.isUndefined(val) ? this.on("mouseleave", val) : this.on("mouseleave")() }; o.mousemove = function (val) { return !mtopt.isUndefined(val) ? this.on("mousemove", val) : this.on("mousemove")() }; o.mouseenter = function (val) { return !mtopt.isUndefined(val) ? this.on("mouseenter", val) : this.on("mouseenter")() }; o.mouseout = function (val) { return !mtopt.isUndefined(val) ? this.on("mouseout", val) : this.on("mouseout")() }; o.mouseover = function (val) { return !mtopt.isUndefined(val) ? this.on("mouseover", val) : this.on("mouseover")() }; o.resize = function (val) { return !mtopt.isUndefined(val) ? this.on("resize", val) : this.on("resize")() }; o.scroll = function (val) { return !mtopt.isUndefined(val) ? this.on("scroll", val) : this.on("scroll")() }; o.select = function (val) { return !mtopt.isUndefined(val) ? this.on("select", val) : this.on("select")() }; o.submit = function (val) { return !mtopt.isUndefined(val) ? this.on("submit", val) : this.on("submit")() }; o.remove = function (fadeOut) { return this.find(function (obj) { var fun = function () { if (obj.removeNode) { obj.removeNode(true) } else { obj.parentNode.removeChild(obj) } }; if (fadeOut == true) { mtopt.node(obj).fadeOut(15); setTimeout(function () { fun() }, 500) } else { fun() } }) }; o.show = function () { this.css({ "display": "" }) }; o.hide = function () { this.css({ "display": "none" }) }; o.opacity = function (val) { return this.find(function (obj) { if (obj.style.opacity || obj.style.opacity == "") { obj.style.opacity = val / 100 } else { obj.style.filter = "alpha(opacity=" + val + ")" } }) }; o.size = function (width, heigth) { this.css({ width: width, height: heigth }) }; o.top = function () { return this.parm("offsetTop") }; o.left = function () { return this.parm("offsetLeft") }; o.width = function () { return this.parm("clientWidth") }; o.height = function () { return this.parm("clientHeight") }; o.floatBase = function (width, direction, speed) { return this.find(function (obj) { var vs = speed || 6; var vw = width || 80; var vd = direction || "left"; var ti = setInterval(function () { switch (vd) { case "left": m.node(obj).css("marginLeft", vw + "px"); break; case "right": m.node(obj).css("marginLeft", -vw + "px"); break; case "up": m.node(obj).css("marginTop", vw + "px"); break; case "down": m.node(obj).css("marginTop", -vw + "px"); break } if (vw <= 0) { clearInterval(ti) } else { vw = vw - vs; vw = vw < 0 ? 0 : vw } }) }) }; o.floatLeft = function (width, speed) { return this.floatBase(width, "left", speed) }; o.floatRight = function (width, speed) { return this.floatBase(width, "right", speed) }; o.floatUp = function (width, speed) { return this.floatBase(width, "up", speed) }; o.floatDown = function (width, speed) { return this.floatBase(width, "down", speed) }; o.fadeIn = function (speed, opacity) { return this.find(function (obj) { var vs = speed || 20; var vy = opacity || 100; var vl = 0; mtopt.node(obj).opacity(0); mtopt.node(obj).show(); var ti = setInterval(function () { mtopt.node(obj).opacity(vl); if (vl >= vy) { clearInterval(ti) } else { vl = vl + 5; vl = vl > vy ? vy : vl } }, vs) }) }; o.fadeOut = function (speed, opacity) { return this.find(function (obj) { var vs = speed || 20; var vy = opacity || 100; mtopt.node(obj).opacity(vy); mtopt.node(obj).show(); var ti = setInterval(function () { mtopt.node(obj).opacity(vy); if (vy <= 0) { clearInterval(ti); mtopt.node(obj).hide() } else { vy = vy - 5; vy = vy < 0 ? 0 : vy } }, vs) }) }; if (mtopt.isObject(lag)) { if (mtopt.isArray(lag) == false) { o.nodes = mtopt.data.array(); o.nodes.push(lag) } else { o.nodes = lag } } else { o.nodes = mtopt.lag.Select(lag, elm || document); if (o.nodes == null) { o.nodes = mtopt.data.array() } } return o
    }, cookie: { set: function (c, f, a, e) { var d = c + "=" + escape(f); if (a && a > 0) { d += ";expires = " + mtopt.data.date().addHour(a).get().toGMTString() } if (e) { d += ";path=" + e } document.cookie = d }, get: function (c) { var a = document.cookie.match(new RegExp("(^| )" + c + "=([^;]*)(;|$)")); if (a != null) { return unescape(a[2]) } else { return null } }, remove: function (a, d) { if (this.get(a) != null) { var c = a + "=v;expires=" + mtopt.data.date().addMinute(-5).get().toGMTString(); if (d) { c += ";path=" + d } document.cookie = c } }, nonceSize: function () { return document.cookie.length } }, cache: { autoLoad: true, autoSave: true, items: null, init: function () { this.items = mtopt.data.dictionary(); this.io.load() }, set: function (a, c) { if (this.getIndex(a) < 0) { this.items.add(a, c) } else { this.items.set(a, c) } if (this.autoSave == true) { this.io.save() } }, get: function (a) { if (this.autoLoad == true) { this.io.load() } return this.items.get(a) }, getIndex: function (a) { if (this.autoLoad == true) { this.io.load() } return this.items.getIndex(a) }, remove: function (a) { if (this.autoLoad == true) { this.io.load() } this.items.removeAt(a); if (this.autoSave == true) { this.io.save() } }, count: function () { return mtopt.json.getString(this.items.items).length }, clear: function () { this.items.clear(); if (this.autoSave == true) { this.io.save() } }, io: { save: function () { var a = "mcache"; var c = mtopt.json.getString(mtopt.cache.items.items); c = escape(c); this.scheme.save(a, c) }, load: function () { var e = this.scheme.load("mcache"); e = unescape(e); var a = mtopt.json.getObject(e); var c = new mtopt.data.dictionary(); for (var d in a) { c.add(a[d].key, a[d].value) } mtopt.cache.items = c }, scheme: { save: function (a, c) { sessionStorage[a] = c }, load: function (a) { return sessionStorage[a] } } } }, local: { autoLoad: true, autoSave: true, items: null, init: function () { this.items = mtopt.data.dictionary(); this.io.load() }, set: function (a, c) { if (this.getIndex(a) < 0) { this.items.add(a, c) } else { this.items.set(a, c) } if (this.autoSave == true) { this.io.save() } }, get: function (a) { if (this.autoLoad == true) { this.io.load() } return this.items.get(a) }, getIndex: function (a) { if (this.autoLoad == true) { this.io.load() } return this.items.getIndex(a) }, remove: function (a) { if (this.autoLoad == true) { this.io.load() } this.items.removeAt(a); if (this.autoSave == true) { this.io.save() } }, nonceSize: function () { return mtopt.json.getString(this.items.items).length }, clear: function () { this.items.clear(); if (this.autoSave == true) { this.io.save() } }, io: { save: function () { var a = "mlocal"; var c = mtopt.json.getString(mtopt.local.items.items); c = escape(c); this.scheme.save(a, c) }, load: function () { var e = this.scheme.load("mlocal"); e = unescape(e); var a = mtopt.json.getObject(e); var c = new mtopt.data.dictionary(); for (var d in a) { c.add(a[d].key, a[d].value) } mtopt.local.items = c }, scheme: { save: function (a, c) { localStorage[a] = c }, load: function (a) { return localStorage[a] } } } }, encry: { hash: function (c) { var a = 0; if (mtopt.isObject(c)) { c = mtopt.json.getString(c) } else { c = c } for (i = 0; i < c.length; i++) { vchar = c.charCodeAt(i); a = ((a << 5) - a) + vchar; a = a & a } return a }, url: { encode: function (g) { if (g == null) { return null } var f = ""; function d(h) { return h.toString(16).toUpperCase() } for (var e = 0, c, a = g.length; e < a; e++) { c = g.charCodeAt(e); if (c < 16) { f += "%0" + c.toString(16).toUpperCase() } else { if (c < 128) { if (c == 32) { f += "+" } else { if ((c >= 48 && c <= 57) || (c >= 65 && c <= 90) || (c >= 97 && c <= 122)) { f += g.charAt(e) } else { f += "%" + d(c) } } } else { if (c < 2048) { f += "%" + d(192 + (c >> 6)); f += "%" + d(128 + c % 64) } else { f += "%" + d(224 + (c >> 12)); f += "%" + d(128 + (c >> 6) % 64); f += "%" + d(128 + c % 64) } } } } return f }, decode: function (a) { if (a == null) { return null } var f = ""; for (var c = 0; c < a.length; c++) { var d = a.charAt(c); if (d == "+") { f += " " } else { if (d == "%") { var e = a.substring(c + 1, c + 3); if (parseInt("0x" + e) > 127) { f += decodeURI("%" + e.toString() + a.substring(c + 3, c + 9).toString()); c += 8 } else { f += String.fromCharCode(parseInt("0x" + e)); c += 2 } } else { f += d } } } return f } }, html: { encode: function (a) { if (a == null) { return null } return a.replace(/[<>&"]/g, function (d) { return { "<": "&lt;", ">": "&gt;", "&": "&amp;", '"': "&quot;" }[d] }) }, decode: function (c) { if (c == null) { return null } var a = { "lt": "<", "gt": ">", "nbsp": " ", "amp": "&", "quot": '"' }; return c.replace(/&(lt|gt|nbsp|amp|quot);/ig, function (e, d) { return a[d] }) } } }, plugin: {}, init: function () { mtopt.parent = window.parent.mtopt; mtopt.settings = mtopt.data.dictionary(); mtopt.openTime = Date.now(); mtopt.event("load").add(function () { var d = mtopt.data.date(Date.now()); mtopt.initTime = d.sub(mtopt.openTime); var a = mtopt.cache.get("mtopt.firstOpen"); var c = mtopt.encry.hash(mtopt.url()); if (a == null || a != c) { mtopt.cache.set("mtopt.firstOpen", c); mtopt.firstOpen = true } else { mtopt.firstOpen = false } }) }
}; mtopt.exec(mtopt, "init"); var m = mtopt; var mn = mtopt.node; var me = mtopt.event; var mp = mtopt.parent; var mpi = mtopt.plugin; var mSettings = mtopt.settings; var mPool = mtopt.lag.Pool; var mSpace = mtopt.lag.Space; var mUnSpace = mtopt.lag.UnSpace; var mImport = mtopt.lag.Import; var mUnImport = mtopt.lag.UnImport; var mSelect = mtopt.lag.Select; var mInteger = mtopt.data.integer; var mDecimal = mtopt.data.decimal; var mString = mtopt.data.string; var mObject = mtopt.data.object; var mDate = mtopt.data.date; var mList = mtopt.data.list; var mStack = mtopt.data.stack; var mQueue = mtopt.data.queue; var mDictionary = mtopt.data.dictionary; var mArray = mtopt.data.array;